/*	The GAE SWF Project: 	Knowledge and tools to help you build Flash and Flex apps on Google App Engine.		Copyright (c) 2008 Aral Balkan. All Rights Reserved.	Released under the open source MIT License. See LICENSE.txt for full license terms.	Profile screen	==============	Corresponds to profile url (/profile)*/package org.gaeswf.examples.initial{	import flash.display.MovieClip;	import flash.text.TextField;	import fl.controls.Button;	import flash.events.Event;	import flash.events.MouseEvent;			import com.mimswright.sync.SynchronizedSetProperty;	import com.mimswright.sync.SynchronizedFunction;	import org.gaeswf.flash.BaseView;		import org.gaeswf.examples.initial.Status;			public class Profile extends BaseView	{		// On stage:		// private var updateProfileButton:fl.controls.Button;		// private var status:Status;		// private var urlError:MovieClip;		// private var urlOK:MovieClip;		// private var nameError:MovieClip;		// private var nameOK:MovieClip;		// private var profileNameTF:TextField;		// private var profileURLTF:TextField;		// private var urlValidationProgress:MovieClip;				private var nameIsValid:Boolean = true;		private var urlIsValid:Boolean = true;		private var delayedUrlValidation:SynchronizedFunction = null;		public function Profile()		{			urlError.visible = false;			nameError.visible = false;			urlOK.visible = false;			nameOK.visible = false;			urlValidationProgress.visible = false;						profileNameTF.addEventListener(Event.CHANGE, profileNameChangeHandler);			profileURLTF.addEventListener(Event.CHANGE, profileUrlChangeHandler);						// Tab index			profileNameTF.tabIndex = 10;			profileURLTF.tabIndex = 11;			profileDescriptionTF.tabIndex = 12;			updateProfileButton.tabIndex = 13;						updateProfileButton.enabled = false;			updateProfileButton.addEventListener(MouseEvent.CLICK, updateProfileButtonHandler);		}				override public function set visible(state:Boolean):void		{			super.visible = state;						// Customize the greeting message 			if (state)			{				if (Model.profile.name != null)				{					profileHeaderTF.text = "Update your profile for fun and profit!";					profileNameTF.text = Model.profile.name;					profileDescriptionTF.text = Model.profile.description;					profileURLTF.text = Model.profile.url;				}				else				{					profileHeaderTF.text = "There's nothing like that new profile smell!";				}			}		}				// Validate the form		private function validateForm():void		{			updateProfileButton.enabled = nameIsValid && urlIsValid;		}				// Validate the URL (perform server-side validation)		private function validateURL():void		{			// Hide the stale status indicators.			urlError.visible = false;			urlOK.visible = false;						// Show the service call progress indicator.			urlValidationProgress.visible = true;			// Don't let the user submit the form until we have the results of the validation.			// (Actually, after testing, let's let the user submit the form if they are skipping 			// by rapidly. Otherwise, it can be too confusing.) 						// updateProfileButton.enabled = false;			// Make the server call.			execute("user.validateURL", profileURLTF.text);					}						//		// Event handlers		//		private function updateProfileButtonHandler(event:MouseEvent):void		{			status.show("Updating profile...");			// Disable the button to stop multiple requests.			updateProfileButton.enabled = false;			// Call the update profile service.			var profileVO:Object = 			{				key: (Model.profile == null) ? null : Model.profile.key,				name: profileNameTF.text,				description: profileDescriptionTF.text,				url: profileURLTF.text			}						// Call the server-side method.			execute("user.updateProfile", profileVO);		}				//		// Validators		//				// URL		private function profileUrlChangeHandler(event:Event):void		{			// Validate the URL using the best source: the server-side data model!			// However, delay it by a few seconds so we don't fire off server			// requests at every key press.			// TODO: Add SynchronizedServiceCall to the framework.			if (delayedUrlValidation != null)			{				// Kill any existing waiting calls.				delayedUrlValidation.kill();			}						// Calls the server-side validation after 500ms of inactivity.			delayedUrlValidation = new SynchronizedFunction("500ms", validateURL);						delayedUrlValidation.start();		}		// Name		private function profileNameChangeHandler(event:Event):void		{			// Simple client-side validation.			nameIsValid = profileNameTF.text != "";						nameOK.visible = nameIsValid;			nameError.visible = !nameIsValid;						validateForm();		}				//		// Service event handlers		//				// User update				public function user_updateProfileResponse(result:Object):void		{			status.show("Your new profile is safely stored in the Googleplex. Check your email for details.");						// Enable the button again.			new SynchronizedSetProperty(updateProfileButton, "enabled", true, "2s").start();		}				public function user_updateProfileFault(fault:Object):void		{			status.show("Oops! Something went wrong when updating your profile.");			trace(fault);						// Enable the button again.			new SynchronizedSetProperty(updateProfileButton, "enabled", true, "2s").start();		}				// Validate URL				public function user_validateURLResponse(result:Object):void		{			urlIsValid = result;						urlOK.visible = result;			urlError.visible = !result;									urlValidationProgress.visible = false;			validateForm();		}				public function user_validateURLFault(fault:Object):void		{			// Hide the progress indicator			status.show("Oops! Something went wrong while trying to validate the URL.");						// There's probably something wrong but enable the form button anyway so that user doesn't get locked in			// to a state they can't get out of without changing the form fields. 			updateProfileButton.visible = true;			urlValidationProgress.visible = false;		}		}}