/*	The GAE SWF Project: 	Knowledge and tools to help you build Flash and Flex apps on Google App Engine.		Copyright (c) 2008 Aral Balkan. All Rights Reserved.	Released under the open source MIT License. See LICENSE.txt for full license terms.	Application class	=================	Top-level form. In the future, some of the functionality here will be pulled up	to a new base class. */package org.gaeswf.examples.initial{	import flash.display.MovieClip;	import flash.text.TextField;	import fl.controls.Button;	import flash.text.TextFormat;			import flash.events.Event;	import flash.events.MouseEvent;		import com.yahoo.astra.fl.controls.TabBar;	import org.gaeswf.flash.BaseApplication;	import org.gaeswf.Service;	import org.gaeswf.examples.initial.Model;		public class Application extends BaseApplication	{		/*		// On stage		var profile:Profile;		var outputTF:TextField;		var authStatusTF:TextField;		var accessURLTF:TextField;		var loginButton:fl.controls.Button;		*/									// Constructor		function Application()		{			// All the good stuff happens in init().		}				override protected function init(event:Event):void		{			super.init(event);						// Initialize the model.			Model.init();			// Stage properties.			stage.frameRate = 30;			stage.scaleMode="showAll";			stage.align="TL";						// Tab order			loginButton.tabIndex = 1;			tabs.tabIndex = 2;			// Initial state of screens.			profile.visible = false;			home.visible = false;			// Textformat for the tab menu.			var tf:TextFormat = new TextFormat();			tf.size = 18;			tf.color = 0xFFFFFF;			tabs.setStyle("textFormat", tf);			tabs.setStyle("focusRectPadding", 10);						// Add listeners.			loginButton.addEventListener(MouseEvent.CLICK, loginButtonClickHandler);			tabs.addEventListener(Event.CHANGE, tabChangeHandler);		}						//		// Event handlers		//						// Service handlers (public)			public function user_loginResponse(event:Object):void		{			// Display auth status			if (Model.auth)			{				var user:Object = Model.user;								// User is logged in				authStatusTF.text = (Model.profile.name == null) ? "Hello, stranger! Wanna fill out your profile?" : "Welcome back, " + Model.profile.name + "!";				loginButton.label = "Logout";								// Add the profile screen				tabs.dataProvider.addItemAt({label:"Profile",data:1}, 1);					// Log user details				for (var userItem in user)				{					outputTF.appendText(userItem + " = " + user[userItem] + "\n");				}			}			else			{				// Remove the profile screen				if (tabs.dataProvider.length > 1)				{					tabs.dataProvider.removeItemAt(1);				}								authStatusTF.text = "Please login to continue.";				loginButton.label = "Login";			}				// Handle any deep links that may exist, now that we have the login results.			//handleDeepLink();				// Log the returned results			outputTF.appendText("loginURL = " + Model.loginURL + "\n");			outputTF.appendText("logoutURL =  " + Model.logoutURL + "\n");			outputTF.appendText("auth = " + Model.auth + "\n");						// Handle SWFAddress mappings			urlChange();						// Start listening for SWFAddress changes			// SWFAddress.addEventListener(SWFAddressEvent.CHANGE, handleSWFAddress);					}				public function user_loginFault(event:Object):void		{			trace("user_loginFault()");						for each (var fault:String in event)			{				outputTF.appendText(event[fault]);			}		}			// We've received the application URL from SWFAddress.		override protected function urlInit():void		{			// Get login status.			// TODO: Add an execute method to the base class so we don't have to 			//       call the Service.call method and pass a reference to ourselves manually.			//       i.e., execute("user.login", "http://localhost:8080/examples/initial/");			var baseUrl:String = SWFAddress.getBaseURL();			var loginReturnUrl:String = SWFAddress.getValue();						execute("user.login", baseUrl, loginReturnUrl);					}		// The application URL has changed.		override protected function urlChange():void		{			var deepLink:String = SWFAddress.getValue();			accessURLTF.text = deepLink;									switch(deepLink)			{				case "/":					tabs.selectedIndex = 0;					break;								case "/profile":					if (Model.auth)					{						tabs.selectedIndex = 1;						break;					}								default:					// Default to home					trace ("Unknown/unauthorized deep link: " + deepLink + ". Ignoring.");					tabs.selectedIndex = 0;			}						navigateFromTabs(tabs);		}			//		// UI event handlers		//				private function loginButtonClickHandler(event:Event):void		{			var url:String = (loginButton.label == "Login") ? Model.loginURL : Model.logoutURL;			getURL(url);		}				// TabBar change handler		private function tabChangeHandler(event:Event):void		{			var tabBar:TabBar = event.target as TabBar;						// Of course, a more complicated app would need a more flexible solution.			// (And so I'm going to develop one in the coming days!) :)			SWFAddress.setValue( (tabBar.selectedIndex == 0) ? "/" : "/profile" );						navigateFromTabs(tabBar);		}				//		// Private methods			//		// Navigate based on selected tab. 		private function navigateFromTabs(tabBar:TabBar):void		{			home.visible = (tabBar.selectedIndex == 0);			profile.visible = (tabBar.selectedIndex == 1);		}			}}