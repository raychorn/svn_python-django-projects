/*	The GAE SWF Project: 	Knowledge and tools to help you build Flash and Flex apps on Google App Engine.		Copyright (c) 2008 Aral Balkan. All Rights Reserved.	Released under the open source MIT License. See LICENSE.txt for full license terms.	Profile screen	==============	Corresponds to profile url (/profile)*/package org.gaeswf.examples.initial{	import com.mimswright.sync.SynchronizedFunction;	import com.mimswright.sync.SynchronizedSetProperty;		import flash.errors.IllegalOperationError;	import flash.events.DataEvent;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;		import lt.uza.utils.Global;		import mx.containers.Canvas;	import mx.controls.Button;	import mx.controls.Label;	import mx.controls.TextInput;	import mx.events.FlexEvent;		import org.gaeswf.Service;	import org.gaeswf.flex.components.PhotoCropper;		public class Profile extends Canvas	{				private var nameIsValid:Boolean = true;		private var urlIsValid:Boolean = true;		private var delayedUrlValidation:SynchronizedFunction = null;		// Defined in MXML		// Unfortunately, these properties have to defined as		// public due to a limitation in Flex. Heck, I'm just 		// happy I was able to get code-behind added to Flex :)		public var nameValidationIcons:ValidationIcons;		public var urlValidationIcons:ValidationIcons;						public var profileHeaderLabel:Label;		public var profileNameInput:TextInput;		public var profileDescriptionInput:TextInput;		public var profileURLInput:TextInput;		public var updateProfileButton:Button;				public var photoCropper:PhotoCropper;			public var status:org.gaeswf.examples.initial.Status;						public function Profile()		{					addEventListener(FlexEvent.CREATION_COMPLETE, init);		}		private function init(event:Event):void		{			// UI event listeners for validation.			profileNameInput.addEventListener(Event.CHANGE, profileNameChangeHandler);			profileURLInput.addEventListener(Event.CHANGE, profileUrlChangeHandler);									// Event listeners for buttons.			updateProfileButton.addEventListener(MouseEvent.CLICK, updateProfileButtonHandler);				}		// Execute: Makes a service call		// TODO: Factor out to a Mixin (we can't use the BaseView base class 		// as we need to use this method from both the Application class which extends		// BaseApplication -> mx.core.Application and the Profile class which 		// extends BaseView -> mx.core.Canvas.		private function execute(serviceName:String, ...args):void		{			// Add the current 			args.unshift(this);			args.unshift(serviceName);			Service.call.apply(Service.call, args);		}				override public function set visible(state:Boolean):void		{			super.visible = state;						// Customize the greeting message 			if (state)			{				if (Model.profile != null)				{					profileHeaderLabel.text = "Update your profile for fun and profit!";					profileNameInput.text = Model.profile.name;					profileURLInput.text = Model.profile.url;					profileDescriptionInput.text = Model.profile.description;					updateProfileButton.enabled = true;				}				else				{					profileHeaderLabel.text = "There's nothing like that new profile smell!";					updateProfileButton.enabled = false;									}							}						}				// Validate the form		private function validateForm():void		{			updateProfileButton.enabled = nameIsValid && urlIsValid;		}				// Validate the URL (perform server-side validation)		private function validateURL():void		{			// Show the service call progress indicator.			urlValidationIcons.show(ValidationIcons.PROGRESS);			// Don't let the user submit the form until we have the results of the validation.			// (Actually, after testing, let's let the user submit the form if they are skipping 			// by rapidly. Otherwise, it can be too confusing.) 			// updateProfileButton.enabled = false;			// Make the server call.			execute("user.validateURL", profileURLInput.text);					}						//		// Event handlers		//				private function updateProfileButtonHandler(event:MouseEvent):void		{			Status.show("Updating profile...");			// Disable the button to stop multiple requests.			updateProfileButton.enabled = false;			// Call the update profile service.			var profileVO:Object = 			{				key: (Model.profile == null) ? null : Model.profile.key,				name: profileNameInput.text,				description: profileDescriptionInput.text,				url: profileURLInput.text			}						// Call the server-side method.			execute("user.updateProfile", profileVO);		}		//		// Validators		//				// URL		private function profileUrlChangeHandler(event:Event):void		{			// Validate the URL using the best source: the server-side data model!			// However, delay it by a few seconds so we don't fire off server			// requests at every key press.			// TODO: Add SynchronizedServiceCall to the framework.			if (delayedUrlValidation != null)			{				// Kill any existing waiting calls.				delayedUrlValidation.kill();			}						// Calls the server-side validation after 500ms of inactivity.			delayedUrlValidation = new SynchronizedFunction("500ms", validateURL);						delayedUrlValidation.start();		}		// Name		private function profileNameChangeHandler(event:Event):void		{			// Simple client-side validation.			nameIsValid = profileNameInput.text != "";						nameValidationIcons.show( nameIsValid ? ValidationIcons.CHECK : ValidationIcons.ERROR );						validateForm();		}				//		// Service event handlers		//						// User update				public function user_updateProfileResponse(result:Object):void		{			Status.show("Your new profile is safely stored in the Googleplex. Check your email for details.");						// Enable the button again.			new SynchronizedSetProperty(updateProfileButton, "enabled", true, "2s").start();		}				public function user_updateProfileFault(fault:Object):void		{			Status.show("Oops! Something went wrong when updating your profile.");			trace(fault);						// Enable the button again.			new SynchronizedSetProperty(updateProfileButton, "enabled", true, "2s").start();		}				// Validate URL				public function user_validateURLResponse(result:Object):void		{			urlIsValid = result;						urlValidationIcons.show( urlIsValid ? ValidationIcons.CHECK : ValidationIcons.ERROR );						validateForm();		}				public function user_validateURLFault(fault:Object):void		{			// Hide the progress indicator			Status.show("Oops! Something went wrong while trying to validate the URL.");						// There's probably something wrong but enable the form button anyway so that user doesn't get locked in			// to a state they can't get out of without changing the form fields. 			updateProfileButton.visible = true;			urlValidationIcons.show(ValidationIcons.NONE);		}		}}